{"version":3,"sources":["config/Config.js","features/memberProcess.js","components/VideoChat.js","Modules/RTCModule.js","Modules/Firebase.js","components/VideoChatContainer.js","components/Profile.js","components/MessageInput.js","components/Register.js","components/Login.js","features/counter/counterSlice.js","components/Message.js","components/Call.js","components/Messages.js","components/Frame.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["storage","firebase","apps","length","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","memberProcess","createSlice","name","initialState","username","avatar","emailAddress","color","showregisterform","showvideocall","reducers","setUsername","state","nickname","setAvatar","picture","setEmailAddress","email","setShowRegisterForm","action","payload","setShowVideoCall","setColor","selectedcolor","incrementByAmount","incrementByAvatar","incrementEmailByAmount","incrementColor","actions","memberUsername","member","memberColor","showRegisterForm","showVideoCall","memberAvatar","memberEmailAddress","VideoChat","props","componentDidMount","navigator","mediaDevices","getUserMedia","video","then","stream","videoTag","current","srcObject","catch","console","log","handleVideo","setState","videoSrc","videoError","closeCall","id","database","ref","update","onStartCallClicked","push","from","user","to","userToCall","rejected","accepted","deleted","loading","renderVideos","width","height","autoPlay","title","renderForms","key","className","value","type","onChange","e","target","onClick","bind","React","createRef","closeButton","this","connectedUser","icon","Solid","Component","createOffer","connection","localStream","doOffer","a","addStream","offer","setLocalDescription","error","initiateLocalStream","audio","initiateConnection","conn","RTCPeerConnection","iceServers","urls","listenToConnectionEvents","remoteUsername","remoteVideoRef","doCandidate","onicecandidate","event","candidate","ontrack","streams","sendAnswer","notif","doAnswer","JSON","parse","setRemoteDescription","createAnswer","answer","doLogin","handleUpdate","remove","on","snapshot","exists","val","set","stringify","Profile","useSelector","dispatch","useDispatch","src","alt","href","All","faVideo","MessageInput","onEmojiClick","emojiObject","setChosenEmoji","text","message","emoji","emojiVisible","sendMessage","preventDefault","refMessages","messageList","fileUrl","messageContent","date","Date","now","Username","Color","isImage","isVideo","image","fileName","chosenEmoji","handleMessage","textContent","reader","FileReader","getTime","file","files","onload","readyState","extension","split","child","put","uploadedFile","getDownloadURL","url","alert","readAsDataURL","class","onSubmit","pickerStyle","placeholder","accept","onVideoChange","onImageChange","showEmoji","actionCodeSettings","handleCodeInApp","Register","useState","setNickname","setEmail","drawRegisterForm","undefined","login","setLogin","data","setData","callEmailFunc","auth","sendSignInLinkToEmail","validate","res","window","localStorage","setItem","code","errorMessage","Card","style","Header","autoLoad","fields","scope","callback","response","accessToken","Image","roundedCircle","Body","Title","Text","Login","showregister","counterSlice","increment","decrement","Message","currentTarget","getAttribute","span","$","closest","html","messageClass","deleteHtml","Sent","data-id","Id","deleteMessage","hour","getUTCHours","minute","getUTCMinutes","IsImage","IsVideo","controls","Deleted","Call","callid","reject","returnData","showVideo","Messages","callList","messages","newState","m","scrollToBottom","calls","animateScroll","containerId","userCalls","filter","callDiv","Object","keys","map","Frame","videoCallContent","configureStore","reducer","counter","counterReducer","memberReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","serviceWorker","ready","registration","unregister","signOut","module","exports"],"mappings":"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","file":"static/js/main.452d8a58.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport { library }  from '@fortawesome/fontawesome-svg-core'\nimport \"firebase/storage\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC6zWRnYvgSfWF7AfsqCCaL18YKD4VIOkI\",\n    authDomain: \"reactchat-3a4dc.firebaseapp.com\",\n    databaseURL: \"https://reactchat-3a4dc.firebaseio.com\",\n    projectId: \"reactchat-3a4dc\",\n    storageBucket: \"reactchat-3a4dc.appspot.com\",\n    messagingSenderId: \"71361254830\",\n    appId: \"1:71361254830:web:cc7cf5c53d164db98ae43f\",\n    measurementId: \"G-6Z255M0NRW\"\n  };\n  var storage = null;\n  // Initialize Firebase\n  if(!firebase.apps.length){\n    firebase.initializeApp(firebaseConfig);\n    storage = firebase.storage()\n  } else {\n    firebase.app(); //If already initialized, use that one\n    storage = firebase.storage()\n  }\n  \n  export{ storage,firebase as default}\n  // export default firebase;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const memberProcess = createSlice({\n  name: 'member',\n  initialState: {\n    username: \"\",\n    avatar: \"\",\n    emailAddress:\"\",\n    color: \"\",\n    showregisterform: \"\",\n    showvideocall: \"\"\n  },\n  reducers: {\n    setUsername: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.username = state.nickname;\n    },\n    setAvatar: (state) => {\n      state.avatar = state.picture;\n    },\n    setEmailAddress: (state) => { //Berker Deneme\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.emailAddress = state.email;\n    },\n    setShowRegisterForm: (state, action) => {\n        state.showregisterform += action.payload;\n    },\n    setShowVideoCall: (state, action) => {\n        state.showvideocall += action.payload;\n    },\n    setColor: (state) => {\n        state.color = state.selectedcolor;\n    },\n    incrementByAmount: (state, action) => {\n        state.username += action.payload;\n    },    \n    incrementByAvatar: (state, action) => {\n        state.avatar += action.payload;\n    },\n    incrementEmailByAmount: (state, action) => {\n      state.emailAddress += action.payload;\n    },\n    incrementColor: (state, name) => {\n        state.color += name.payload;\n    }\n  },\n});\n\nexport const { setUsername, setAvatar, setColor, incrementByAmount, incrementEmailByAmount, incrementByAvatar, incrementColor, setShowRegisterForm, setShowVideoCall } = memberProcess.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const memberUsername = state => state.member.username;\nexport const memberColor = state => state.member.color;\nexport const showRegisterForm = state => state.member.showregisterform;\nexport const showVideoCall = state => state.member.showvideocall;\nexport const memberAvatar = state => state.member.avatar;\nexport const memberEmailAddress = state => state.member.emailAddress; //Berker deneme\n\nexport default memberProcess.reducer;\n","import React, { useState } from 'react';\r\nimport styles from '../style.css';\r\nimport 'firebase/database';\r\nimport classnames from 'classnames';\r\nimport { PropTypes } from 'react';\r\nimport firebase from '../config/Config';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as Solid from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  setUsername,\r\n  incrementByAmount,\r\n  setShowRegisterForm,\r\n  memberUsername,\r\n  showRegisterForm\r\n} from '../features/memberProcess';\r\nimport jsxToString from 'jsx-to-string';\r\nimport { renderToString } from 'react-dom/server'\r\n\r\nexport function GetUserName() {\r\n  const username = useSelector(memberUsername);\r\n  return username;\r\n}\r\n\r\nexport default class VideoChat extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      userToCall: null,\r\n      loading: false\r\n    }\r\n    this.closeCall = this.closeCall.bind(this);\r\n\tthis.videoTag = React.createRef();\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n    navigator.mediaDevices\r\n            .getUserMedia({video: true})\r\n            .then(stream => this.videoTag.current.srcObject = stream)\r\n            .catch(console.log);\r\n  }\r\n\r\n  handleVideo = (stream) => {\r\n    this.setState({ videoSrc: stream });\r\n  }\r\n\r\n  videoError = () => {\r\n\r\n  }\r\n\r\n  closeCall = () => {\r\n    const id = this.props.id;\r\n      const messagesRef = firebase.database().ref(\"calls/\" + id);\r\n      messagesRef.update({'deleted': true});\r\n  }\r\n\r\n  //onLoginClicked = async () => {\r\n    //await this.props.onLogin(this.state.username)\r\n    //this.setState({\r\n      //isLoggedIn: true\r\n    //})\r\n  //}\r\n\r\n onStartCallClicked = () => {\r\n  const call = firebase.database().ref(\"calls\");\r\n  call.push({\r\n            from: this.props.user,\r\n            to: this.state.userToCall,\r\n            rejected: false,\r\n            accepted: false,\r\n            deleted: false\r\n        });\r\n\r\n        this.setState({loading: true});\r\n  }\r\n\r\n  renderVideos = () => {\r\n    return  <video id={this.props.id}\r\n    ref={this.videoTag}\r\n    width={this.props.width}\r\n    height={this.props.height}\r\n    autoPlay\r\n    title={this.props.title}></video>\r\n  }\r\n\r\n  renderForms = () => {\r\n    return <div key='a' className='form'>\r\n        <label>{ this.props.user } Call to</label>\r\n        <input value={this.state.userToCall} type=\"text\" onChange={e => this.setState({ userToCall: e.target.value })} />\r\n        <button onClick={this.onStartCallClicked} id=\"call-btn\" className=\"btn btn-primary\">Call</button>\r\n\r\n      </div>\r\n    /*\r\n    return this.state.isLoggedIn\r\n      ? <div key='a' className='form'>\r\n        <label>Call to</label>\r\n        <input value={this.state.userToCall} type=\"text\" onChange={e => this.setState({ userToCall: e.target.value })} />\r\n        <button onClick={this.onStartCallClicked} id=\"call-btn\" className=\"btn btn-primary\">Call</button>\r\n\r\n      </div>\r\n      : <div key='b' className='form'>\r\n        <label>Type a name</label>\r\n        <input value={this.state.username} type=\"text\" onChange={e => this.setState({ username: e.target.value })} />\r\n\r\n        <button onClick={this.onLoginClicked} id=\"login-btn\" className=\"btn btn-primary\">Login</button>\r\n\r\n      </div>\r\n      */\r\n  }\r\n\r\n  render () {\r\n    var closeButton = \"\";\r\n    var loading = \"\";\r\n\r\nif(this.props.connectedUser){\r\n  closeButton = <FontAwesomeIcon onClick={this.closeCall} className=\"close call\" icon={Solid.faPhoneSlash} />\r\n}\r\n\r\nif(this.state.loading){\r\n  loading = \"Calling...\";\r\n}\r\n\r\n    return <div id=\"camera-body\"><section id=\"container\">\r\n      {this.props.connectedUser ? null : this.renderForms()}\r\n\r\n      {this.renderVideos()}\r\n      {loading}\r\n      {closeButton}\r\n\r\n    </section></div>\r\n  }\r\n}","export const createOffer = async (connection, localStream, userToCall, doOffer, database, username) => {\r\n  try {\r\n    connection.addStream(localStream)\r\n\r\n    const offer = await connection.createOffer()\r\n    await connection.setLocalDescription(offer);\r\n\r\n    doOffer(userToCall,offer,database,username);\r\n  } catch (exception) {\r\n    console.error(exception)\r\n  }\r\n}\r\n\r\nexport const initiateLocalStream = async () => {\r\n  try {\r\n    const stream = await navigator.mediaDevices.getUserMedia({\r\n      video: true,\r\n      audio: true\r\n    })\r\n    return stream;\r\n  } catch (exception) {\r\n    console.error(exception)\r\n  }\r\n}\r\nexport const initiateConnection = async () => {\r\n  try {\r\n    // create a connection\r\n    // using Google public stun server\r\n\r\n    const configuration={\r\n      iceServers: [{urls: 'stun:stun2.1.google.com:19302'}]\r\n    }\r\n    const conn = new RTCPeerConnection(configuration)\r\n    return conn;\r\n\r\n  } catch (exception) {\r\n    console.error(exception)\r\n  }\r\n}\r\n\r\nexport const listenToConnectionEvents = (conn, username, remoteUsername, database, remoteVideoRef, doCandidate) => {\r\n  // listen for ice candidates\r\n  conn.onicecandidate = function(event){\r\n    if(event.candidate){\r\n      doCandidate(remoteUsername, event.candidate, database, username);\r\n    }\r\n  }\r\n  // when a remote user adds stream to the peer connection, we display it\r\n  conn.ontrack = function (e){\r\n    if(remoteVideoRef.srcObject !== e.streams[0]){\r\n      remoteVideoRef.srcObject = e.streams[0];\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const sendAnswer = async (conn, localStream, notif, doAnswer, database, username) => {\r\n  try {\r\n    // add the localstream to the connection\r\n    // set the remote and local descriptions and create an answer\r\n    conn.addStream(localStream)\r\n    \r\n    const offer=JSON.parse(notif.offer)\r\n    conn.setRemoteDescription(offer)\r\n    // create an answer to an offer\r\n    const answer = await conn.createAnswer()\r\n    conn.setLocalDescription(answer)\r\n\r\n    doAnswer(notif.from, answer, database, username)\r\n    // send answer to the other peer\r\n\r\n  } catch (exception) {\r\n    console.error(exception)\r\n  }\r\n}\r\n\r\nexport const startCall = (conn, notif) => {\r\n  // it should be called when we\r\n  // received an answer from other peer to start the call\r\n  // and set remote the description\r\n  const answer = JSON.parse(notif.answer)\r\n  conn.setRemoteDescription(answer)\r\n}\r\n\r\nexport const addCandidate = (conn, notif) => {\r\n  // apply the new received candidate to the connection\r\n  const candidate = JSON.parse(notif.candidate)\r\n  conn.addIceCandidate(new RTCIceCandidate(candidate))\r\n\r\n}","\r\n\r\nexport const doLogin = async (username, database, handleUpdate) => {\r\n    await database.ref('/notifs/' +username).remove()\r\n\r\n    database.ref('/notifs/'+username).on('value', snapshot =>{\r\n        snapshot.exists() && handleUpdate(snapshot.val(), username)\r\n    })\r\n}\r\n\r\nexport const doOffer = async(to, offer, database, username) => {\r\n    await database.ref('/notifs/' + to).set({\r\n        type:'offer',\r\n        from:username,\r\n        offer: JSON.stringify(offer)\r\n    })\r\n}\r\n\r\nexport const doAnswer = async (to, answer, database, username) => {\r\nawait database.ref('/notifs/'+to).update({\r\n    type: 'answer',\r\n    from:username,\r\n    answer: JSON.stringify(answer)\r\n})\r\n}\r\n\r\nexport const doCandidate = async (to, candidate, database, username) => {\r\n    //send new candidate too the peer\r\n    await database.ref('/notifs/' + to).update({\r\n        type: 'candidate',\r\n        from:username,\r\n        candidate: JSON.stringify(candidate)\r\n    })\r\n}","import React from 'react'\r\n//import styles from '../VideoChat.css'\r\nimport config from '../config/Config'\r\nimport 'firebase/database'\r\nimport firebase from 'firebase/app' \r\nimport VideoChat from './VideoChat'\r\nimport {startCall,createOffer, initiateConnection, initiateLocalStream, listenToConnectionEvents, sendAnswer, addCandidate} from '../Modules/RTCModule'\r\nimport { doLogin,doAnswer, doCandidate, doOffer } from '../Modules/Firebase'\r\nimport { data } from 'jquery'\r\nimport 'webrtc-adapter'\r\nimport GetUsername from '../Functions';\r\n\r\nconsole.log(firebase.name);\r\nconsole.log(firebase.database());\r\n\r\nclass VideoChatContainer extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      database: null,\r\n      connectedUser: null,\r\n      localStream: null,\r\n      localConnection: null\r\n    }\r\n    this.localVideoRef = React.createRef()\r\n    this.remoteVideoRef = React.createRef()\r\n    \r\n  }\r\n\r\n    componentDidMount = async () => {\r\n      // initialize firebase\r\n        //firebase.initializeApp(config)\r\n      // getting local video stream\r\n      const localStream = await initiateLocalStream()\r\n      this.localVideoRef.srcObject = localStream;\r\n\r\n      // create the local connection\r\n      const localConnection = await initiateConnection()\r\n      this.setState({\r\n          database:firebase,\r\n          localStream,\r\n          localConnection\r\n      })\r\n\r\n    }\r\n\r\n    shouldComponentUpdate (nextProps, nextState) {\r\n      // prevent rerenders if not necessary\r\n        if(this.state.database !== nextState.database){\r\n            return false;\r\n        }\r\n\r\n        if(this.state.localStream !== nextState.localStream){\r\n            return false;\r\n        }\r\n\r\n        if(this.state.localConnection !== nextState.localConnection){\r\n            return false;\r\n        }\r\n\r\n      return true\r\n    }\r\n\r\n    startCall = async (username, userToCall) => {\r\n        const {database,localConnection,localStream}=this.state;\r\n      // listen to the events first\r\n        listenToConnectionEvents(localConnection, username, userToCall,database,this.remoteVideoRef,doCandidate)\r\n      // create a new offer\r\n        createOffer(localConnection,localStream, userToCall,doOffer,database,username)\r\n    }\r\n\r\n    \r\n    onLogin = async (username) => { \r\n      // do the login phase\r\n      await doLogin(username, this.state.database, this.handleUpdate)\r\n\r\n    }\r\n\r\n    setLocalVideoRef = ref => {\r\n      this.localVideoRef = ref\r\n    }\r\n\r\n    setRemoteVideoRef = ref => {\r\n      this.remoteVideoRef = ref\r\n    }\r\n\r\n    handleUpdate = (notif, username) => {\r\n      // read the received notif and apply it\r\n        const {database,localConnection,localStream} = this.state\r\n      if(notif){\r\n          switch (notif.type){\r\n              case 'offer':\r\n\r\n              this.setState({\r\n                  connectedUser: notif.from\r\n              })\r\n                  //listen connection events\r\n                    listenToConnectionEvents(localConnection,username,notif.from,database,this.remoteVideoRef,doCandidate)\r\n                  //send response\r\n                  sendAnswer(localConnection,localStream,notif,doAnswer,database,username)\r\n                  \r\n                  break;\r\n                  case 'answer':\r\n                      this.setState({\r\n                          connectedUser: notif.from\r\n                      })\r\n                      //start the call\r\n                      startCall(localConnection, notif)\r\n                      break;\r\n                      case 'candidate':\r\n                          //add candidate to the connection\r\n                          addCandidate(localConnection, notif)\r\n\r\n                          break;\r\n                          default:\r\n                              break;\r\n          }\r\n      }\r\n\r\n    }\r\n\r\n    render () {\r\n      return <VideoChat\r\n        startCall={this.startCall}\r\n        onLogin={this.onLogin}\r\n        setLocalVideoRef={this.setLocalVideoRef}\r\n        setRemoteVideoRef={this.setRemoteVideoRef}\r\n        connectedUser={this.state.connectedUser}\r\n      />\r\n    }\r\n}\r\n\r\nexport default VideoChatContainer","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as All from '@fortawesome/free-brands-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect, useHistory, Link   } from 'react-router-dom'; //Deneme 8.12.20\nimport VideoChatContainer from './VideoChatContainer';\nimport VideoChat from './VideoChat';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n    memberAvatar,\n    memberColor,\n    setShowVideoCall\n} from '../features/memberProcess';\nimport { faVideo } from '@fortawesome/free-solid-svg-icons';\n\nconst Profile = (props) => {\n    const username = useSelector(memberUsername);\n    const avatar = useSelector(memberAvatar);\n    const color = useSelector(memberColor);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className={'contact-profile'}>\n\t\t\t<img src={avatar} alt=\"\" />\n\t\t\t<p>{username}</p>\n\t\t\t<div className={'social-media'}> \n            <a target=\"_blank\" href=\"https://www.instagram.com/reactjsofficial/\"><FontAwesomeIcon icon={All.faInstagram} /></a>\n            <a target=\"_blank\" href=\"https://www.facebook.com/groups/reacttr/\"><FontAwesomeIcon icon={All.faFacebookF} /></a>\n            <a target=\"_blank\" href=\"https://twitter.com/reactjs\"><FontAwesomeIcon icon={All.faTwitter} /></a>   \n                <FontAwesomeIcon onClick={() => dispatch(setShowVideoCall(\"true\"))} icon={faVideo} />\n\t\t\t</div>\n\t\t</div>\n     )\n}\n\nexport default Profile;","import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as All from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport firebase from '../config/Config';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n} from '../features/memberProcess';\nimport GetUsername from '../Functions';\nimport {storage} from \"../config/Config\";\nimport Picker from 'emoji-picker-react';\n\nclass MessageInput extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messageList: [],\n            message: \"\",\n            image: \"\",\n            video:\"\",\n            username: this.props.Username,\n            color: this.props.Color,\n            fileName : \"\",\n            isVideo: false,\n            isImage: false,\n            chosenEmoji: null,\n            setChosenEmoji: null,\n            emojiVisible: false\n        };\n\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n    }\n\n    handleMessage (event) {\n        this.setState({message: event.target.value});\n    }\n\n    showEmoji(){\n        var isActive = this.state.emojiVisible;\n\n        if (isActive){\n            this.setState({emojiVisible: false});\n        } else {\n            this.setState({emojiVisible: true});\n        }\n    }\n\n    addEmoji(e) {\n        var text = this.state.message;\n        text = text + e.target.textContent;\n        this.setState({message: text});\n    }\n\n    onEmojiClick = (e, emojiObject) => {\n        this.setChosenEmoji(emojiObject);\n      };\n\n      setChosenEmoji = (emojiObject) => {\n        var text = this.state.message;\n        text = text + emojiObject.emoji;\n        this.setState({message: text});\n        this.setState({emojiVisible: false});\n      };\n\n    sendMessage = e => {\n        e.preventDefault();\n\n        const refMessages = firebase.database().ref(\"messages\");\n        var messageList = this.state.messageList;\n\n        const fileUrl = this.state.fileUrl;\n\n        var messageContent = this.state.message;\n\n       if(fileUrl != null && fileUrl.length > 0) {\n           messageContent = fileUrl;\n       }\n\n        refMessages.push({\n            message: messageContent,\n            date: Date.now(),\n            username: this.props.Username,\n            color: this.props.Color,\n            deleted: false,\n            isImage: this.state.isImage,\n            isVideo : this.state.isVideo\n        });\n\n        this.setState({fileUrl:\"\"})\n        this.setState({\"messageList\": messageList, \"message\": \"\"});\n        this.setState({isImage: false, isVideo: false});\n      }\n\n\n      onVideoChange (e){\n\n        \n        const reader = new FileReader();\n\n        var currentDate = new Date\n        var fileName = currentDate.getTime();\n\n        let file = e.target.files[0];\n\n        if(file){\n            reader.onload = () => {\n                if(reader.readyState === 2){\n                    var extension = file.name.split(\".\")[1];\n                    console.log(file);\n                    this.setState({video:file});\n                    if(file){\n                        const storageRef = storage.ref();\n                        const videoRef = storageRef.child(fileName + \".\" + extension);\n                        videoRef.put(file)\n                        .then((uploadedFile) => {\n                            return uploadedFile.ref.getDownloadURL();\n                        }).then(url => {\n                            this.setState({fileName:file.name});\n                            this.setState({fileUrl:url});\n                            this.setState({isVideo: true});\n                            alert(\"Video Başarıyla Yüklendi\");\n                        });\n                    } else{\n                        alert(\"Lütfen Video Seçiniz.\");\n                    }\n                }\n            };\n            reader.readAsDataURL(e.target.files[0]);\n        } else{\n            this.setState({this:null});\n        }\n    };\n\n      onImageChange (e){\n\n        \n        const reader = new FileReader();\n\n        var currentDate = new Date\n        var fileName = currentDate.getTime();\n\n        let file = e.target.files[0];\n\n        if(file){\n            reader.onload = () => {\n                if(reader.readyState === 2){\n                    var extension = file.name.split(\".\")[1];\n                    console.log(file);\n                    this.setState({image:file});\n                    if(file){\n                        const storageRef = storage.ref();\n                        const imageRef = storageRef.child(fileName + \".\" + extension);\n                        imageRef.put(file)\n                        .then((uploadedFile) => {\n                            return uploadedFile.ref.getDownloadURL();\n                        }).then(url => {\n                            this.setState({fileName:file.name});\n                            this.setState({fileUrl:url});\n                            this.setState({isImage: true});\n                            alert(\"Fotoğraf Başarıyla Yüklendi\");\n                        });\n                    } else{\n                        alert(\"Lütfen Fotoğraf Seçiniz.\");\n                    }\n                }\n            };\n            reader.readAsDataURL(e.target.files[0]);\n        } else{\n            this.setState({this:null});\n        }\n    };\n\n    render () {\n        return (\n            <div className={'message-input'}>\n                <div class=\"wrap\">\n                    <form onSubmit={this.sendMessage}>\n                        <div id=\"emojis\" className={this.state.emojiVisible ? \"show\" : \"hide\"}>\n                        <Picker onEmojiClick={this.onEmojiClick} pickerStyle={{ width: '100%', height:'400px' }}/>\n{/*                             <ul>\n                                <li onClick={this.addEmoji.bind(this)}>😀</li>\n                                <li onClick={this.addEmoji.bind(this)}>😂</li>\n                                <li onClick={this.addEmoji.bind(this)}>😍</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤪</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤗</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤐</li>\n                                <li onClick={this.addEmoji.bind(this)}>😏</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤤</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤮</li>\n                                <li onClick={this.addEmoji.bind(this)}>😎</li>\n                                <li onClick={this.addEmoji.bind(this)}>😱</li>\n                                <li onClick={this.addEmoji.bind(this)}>😈</li>\n                                <li onClick={this.addEmoji.bind(this)}>☠</li>\n                                <li onClick={this.addEmoji.bind(this)}>💩</li>\n                                <li onClick={this.addEmoji.bind(this)}>😸</li>\n                                <li onClick={this.addEmoji.bind(this)}>💗</li>\n                                <li onClick={this.addEmoji.bind(this)}>💙</li>\n                                <li onClick={this.addEmoji.bind(this)}>💯</li>\n                                <li onClick={this.addEmoji.bind(this)}>💬</li>\n                                <li onClick={this.addEmoji.bind(this)}>👋</li>\n                                <li onClick={this.addEmoji.bind(this)}>👌</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤟</li>\n                                <li onClick={this.addEmoji.bind(this)}>👍</li>\n                                <li onClick={this.addEmoji.bind(this)}>👏</li>\n                                <li onClick={this.addEmoji.bind(this)}>🙏</li>\n                                <li onClick={this.addEmoji.bind(this)}>💪</li>\n                                <li onClick={this.addEmoji.bind(this)}>👀</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤦‍♂️</li>\n                                <li onClick={this.addEmoji.bind(this)}>🤦</li>\n                                <li onClick={this.addEmoji.bind(this)}>👨‍🎓</li>\n                                <li onClick={this.addEmoji.bind(this)}>🍻</li>\n                                <li onClick={this.addEmoji.bind(this)}>🌍</li>\n                                <li onClick={this.addEmoji.bind(this)}>⏰</li>\n                                <li onClick={this.addEmoji.bind(this)}>❄</li>\n                                <li onClick={this.addEmoji.bind(this)}>☃</li>\n                                <li onClick={this.addEmoji.bind(this)}>🔥</li>\n                                <li onClick={this.addEmoji.bind(this)}>🎃</li>\n                                <li onClick={this.addEmoji.bind(this)}>🏀</li>\n                                <li onClick={this.addEmoji.bind(this)}>⚽</li>\n                                <li onClick={this.addEmoji.bind(this)}>🎱</li>\n                                <li onClick={this.addEmoji.bind(this)}>🧿</li>\n                                <li onClick={this.addEmoji.bind(this)}>🔊</li>\n                                <li onClick={this.addEmoji.bind(this)}>📺</li>\n                                <li onClick={this.addEmoji.bind(this)}>🚳</li>\n                                <li onClick={this.addEmoji.bind(this)}>⛔</li>\n                                <li onClick={this.addEmoji.bind(this)}>🏳️‍🌈</li>\n                                <li onClick={this.addEmoji.bind(this)}>🇵🇱</li>\n                                <li onClick={this.addEmoji.bind(this)}>🇹🇷</li>\n                                <li onClick={this.addEmoji.bind(this)}>👨‍🔬</li>\n                                <li onClick={this.addEmoji.bind(this)}>👮</li>\n                                <li onClick={this.addEmoji.bind(this)}>🕵</li>\n                                <li onClick={this.addEmoji.bind(this)}>💂‍♂️</li>\n                                <li onClick={this.addEmoji.bind(this)}>🎅</li>\n                                <li onClick={this.addEmoji.bind(this)}>🧍</li>\n                                <li onClick={this.addEmoji.bind(this)}>🏃‍♂️</li>\n\n                            </ul> */}\n                        </div>\n                        <input value={this.state.message} onChange={this.handleMessage} type=\"text\" placeholder=\"Write your message...\" />\n                        <input type=\"file\" id=\"fileInput\" accept=\"image/x-png,image/jpeg,image/jpg,video/mp4\" onChange={(e) => { e.target.files[0].type == \"video/mp4\" ? this.onVideoChange(e) : this.onImageChange(e) }}/>\n                        <div className=\"btn_class\" onClick={this.showEmoji.bind(this)}>Emoji</div>\n                        {/* <input type=\"file\" accept=\"video/*\" onChange={(e) => {this.onVideoChange(e) }}/> */}\n                        <button type=\"submit\" className={'submit'}><FontAwesomeIcon icon={All.faPaperPlane} /></button>\n                    </form>\n                </div>\n\t\t    </div>\n        )\n    }\n}\n\nexport default MessageInput;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    setAvatar,\n    incrementByAmount,\n    incrementByAvatar,\n    incrementEmailByAmount,\n    memberUsername,\n    memberEmailAddress\n} from '../features/memberProcess';\nimport Color from './Color';\nimport '../components/emailLinkAuth'; // Berker Deneme\nimport { event } from 'jquery';\nimport firebase from '../config/Config';\nimport {validate,res} from 'react-email-validator';\nimport FacebookLogin from 'react-facebook-login';\nimport { Card, Image } from 'react-bootstrap';\n\nvar actionCodeSettings = {\n    url: \"http://localhost:3000/reactchat\", //Projenin çalıştığı localhost url'ini ver.\n    handleCodeInApp: true\n};\n\nexport default function Register(props) {\n    const username = useSelector(memberUsername);\n    const emailAddress = useSelector(memberEmailAddress);\n    const [nickname, setNickname] = useState('');\n    const [email, setEmail] = useState('');\n    const [avatar, setAvatar] = useState('');\n    const [selectedcolor, setselectedcolor] = useState('');\n    const dispatch = useDispatch();\n    var drawRegisterForm = (username == \"\" || username == null || username == undefined);\n\n\n    const [login, setLogin] = useState(false);\n    const [data, setData] = useState({});\n    const [picture, setPicture] = useState('');\n\n\n    const responseFacebook = (response) => {\n        console.log(response);\n        setData(response);\n        if(response.accessToken){\n            setNickname(response.name);\n            setEmail(\"berkerbilgen@yandex.com\");\n            setAvatar(response.picture.data.url);\n            callEmailFunc(response.email, response.name, picture);\n        }\n\n        if (response.accessToken) {\n          setLogin(true);\n        } else {\n          setLogin(false);\n        }\n      }\n\n\n    function callEmailFunc(email, nickname, picture){\n        firebase.auth().sendSignInLinkToEmail(email, actionCodeSettings).then(() => {\n            validate(email);\n            if(res){\n                window.localStorage.setItem('emailForSignIn', email);\n                alert(\"Set edildi\");\n            }\n            else{\n                alert(\"Email Hatalı\");\n            }\n        {/*window.localStorage.setItem('emailForSignIn', email);*/}\n            /*alert(\"Set edildi\");*/\n        })\n        .catch((error) => {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            alert(errorMessage);\n        });\n\n        dispatch(incrementByAvatar(avatar));\n        dispatch(incrementByAmount(nickname));\n        \n    }\n    if (drawRegisterForm) {\n        return (\n            <div id=\"LoginForm\">\n                <div class=\"containerFacebook\">\n                  <Card style={{ width: '250px', height: '20px'}}>\n                    <Card.Header>\n                      {!login &&\n                        <FacebookLogin\n                          appId=\"971141813672064\"\n                          autoLoad={true}\n                          fields=\"name,email,picture\"\n                          scope=\"public_profile,user_friends\"\n                          callback={responseFacebook}\n                          icon=\"fa-facebook\" />\n                      }\n                      {login &&\n                        <Image src={picture} roundedCircle />\n                      }\n                    </Card.Header>\n                    {login &&\n                      <Card.Body>\n                        <Card.Title>{data.name}</Card.Title>\n                        <Card.Text>\n                          {data.email}\n                        </Card.Text>\n                      </Card.Body>\n                    }\n                  </Card>\n                </div>\n                <div class=\"login-form\">\n                <h3>Who are you?</h3>\n                \n                <input value={nickname} onChange={e => setNickname(e.target.value)} type=\"text\" placeholder=\"Nickname\" />\n               {/* <input type=\"text\" placeholder=\"Email\" /> */}\n               <input value={email} onChange={e => setEmail(e.target.value)} type=\"text\" placeholder=\"Email\" />\n                <input type=\"password\" placeholder=\"Password\" />\n                {/*<button onClick={() => dispatch(incrementByAmount(nickname))}>Login</button>*/}\n                {/*<button onClick={() => callEmailFunc(email, nickname)}>Login</button>*/}\n                <button onClick={() => callEmailFunc(email,nickname)}>Login</button>\n                </div>\n                \n            </div>\n        );\n    } else {\n        return (\n            <div>\n            </div>\n        );\n    }\n}","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    setShowRegisterForm,\n    memberUsername,\n    showRegisterForm\n} from '../features/memberProcess';\nimport Register from './Register';\nimport FacebookLogin from 'react-facebook-login';\n\n\nexport default function Login(props) {\n    const username = useSelector(memberUsername);\n    const showregister = useSelector(showRegisterForm);\n\n    const [nickname, setNickname] = useState('');\n    const [selectedcolor, setselectedcolor] = useState('');\n    const dispatch = useDispatch();\n    var drawLoginForm = (username == \"\" || username == null || username == undefined);\n\n\n    if (showregister == \"true\") {\n        return ( \n            <Register />\n        )\n    }  \n    else {\n        \n            return (\n                <div>\n                </div>\n            );\n    }\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from 'react';\nimport firebase from '../config/Config';\nimport { animateScroll } from \"react-scroll\";\nimport $ from 'jquery'; \nimport {storage} from \"../config/Config\";\n\nclass Message extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    deleteMessage (event) {\n        const messagesRef = firebase.database().ref(\"messages/\" + event.currentTarget.getAttribute('data-id'));\n        messagesRef.update({'deleted': true});\n        var span = $(\"span[data-id='\" + event.currentTarget.getAttribute('data-id') + \"']\");\n        $(span).closest(\"p\").html(\"Bu mesaj silindi\");\n    }\n\n    render() {\n        var messageClass = \"sent\";\n        var deleteHtml = \"\";\n\n        if(!this.props.Sent) {\n            messageClass = \"replies\";\n            deleteHtml = <span data-id={this.props.Id} onClick={this.deleteMessage} >Sil</span>\n        }\n\n        var date = new Date(this.props.Date);\n        var hour = date.getUTCHours();\n        var minute = date.getUTCMinutes();\n        \n        var messageContent = \"\";\n\n        if(this.props.IsImage) {\n            messageContent = <p className={this.props.Color}><img className=\"message-image\" src={this.props.Text} /></p>\n        } \n        else if(this.props.IsVideo){\n            messageContent = <p className={this.props.Color}><video className=\"message-video\"src={this.props.Text} width=\"2000\" height=\"900\" controls>\n            </video>\n      </p>\n        }\n        else {\n            messageContent = <p className={this.props.Color}>{this.props.Text} <div> {deleteHtml} <span>{hour}:{minute}</span></div></p>;\n        }\n\n        if(this.props.Deleted){\n            var className = this.props.Color + \" deleted\"\n            messageContent = <p className={className}>Bu mesaj silindi</p>;\n        }\n\n        return (\n            <li className={messageClass}>\n                <img src={'http://emilcarlsson.se/assets/mikeross.png'} alt=\"\" />\n                {messageContent}\n            </li>\n        )\n    }\n}\n\nexport default Message;","import React from 'react'\r\n//import styles from '../VideoChat.css'\r\nimport config from '../config/Config'\r\nimport 'firebase/database'\r\nimport firebase from 'firebase/app' \r\nimport VideoChat from './VideoChat'\r\nimport {startCall,createOffer, initiateConnection, initiateLocalStream, listenToConnectionEvents, sendAnswer, addCandidate} from '../Modules/RTCModule'\r\nimport { doLogin,doAnswer, doCandidate, doOffer } from '../Modules/Firebase'\r\nimport { data } from 'jquery'\r\nimport 'webrtc-adapter'\r\nimport GetUsername from '../Functions';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as All from '@fortawesome/free-brands-svg-icons';\r\nimport * as Solid from '@fortawesome/free-solid-svg-icons';\r\n\r\nconsole.log(firebase.name);\r\nconsole.log(firebase.database());\r\n\r\nclass Call extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.accept = this.accept.bind(this);\r\n  }\r\n\r\n    componentDidMount = async () => {\r\n      \r\n    }\r\n\r\n    accept = () => {\r\n        const id = this.props.callid;\r\n        const messagesRef = firebase.database().ref(\"calls/\" + id);\r\n        messagesRef.update({'accepted': true});\r\n    }\r\n\r\n    reject = () => {\r\n        const id = this.props.callid;\r\n        const messagesRef = firebase.database().ref(\"calls/\" + id);\r\n        messagesRef.update({'rejected': true, 'deleted': true});\r\n    }\r\n\r\n    render () {\r\n      var returnData = <div class=\"calling\">\r\n    <p>{ this.props.from } calling!</p>\r\n    <FontAwesomeIcon onClick={this.accept} className=\"accept call\" icon={Solid.faPhone} />\r\n    <FontAwesomeIcon onClick={this.reject} className=\"reject call\" icon={Solid.faPhoneSlash} />\r\n</div>;\r\n\r\n      if (this.props.showVideo == \"true\") {\r\n        returnData = <VideoChat user=\"\" connectedUser={true} id={this.props.callid} />\r\n      }\r\n      return returnData;\r\n    }\r\n}\r\n\r\nexport default Call","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as All from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport firebase from '../config/Config';\nimport Message from './Message';\nimport { animateScroll } from \"react-scroll\";\nimport Call from './Call';\n\nclass Messages extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: this.props.Username,\n            messageList: [],\n            callList: []\n        };\n    }\n\n    componentDidMount() {\n        const messagesRef = firebase.database().ref(\"messages\");\n        messagesRef.on(\"value\", (snapshot) => {\n            let messages = snapshot.val();\n            let newState = [];\n            for (let m in messages) {\n                newState.push({\n                    id: m,\n                    message: messages[m].message,\n                    date: messages[m].date,\n                    username: messages[m].username,\n                    color: messages[m].color,\n                    deleted: messages[m].deleted,\n                    isImage: messages[m].isImage,\n                    isVideo: messages[m].isVideo\n                });\n            }\n            this.setState({ messageList: newState });\n        });\n\n        this.scrollToBottom();\n\n        const callsRef = firebase.database().ref(\"calls\");\n        callsRef.on(\"value\", (snapshot) => {\n            let calls = snapshot.val();\n            let newState = [];\n            for (let m in calls) {\n                newState.push({\n                    id: m,\n                    from: calls[m].from,\n                    to: calls[m].to,\n                    accepted: calls[m].accepted,\n                    rejected: calls[m].rejected,\n                    deleted: calls[m].deleted\n                });\n            }\n\n            this.setState({ callList: newState });\n        });\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        animateScroll.scrollToBottom({\n          containerId: \"message-list\"\n        });\n    }\n\n    render () {\n        const newData = React.createRef();\n        var username = this.props.Username;\n        const userCalls = this.state.callList.filter(function(e) {\n            return e.to === username && e.accepted === false && e.rejected === false && e.deleted === false\n        });\n\n        const showVideo = this.state.callList.filter(function(e) {\n            return e.to === username && e.accepted === true && e.rejected === false && e.deleted === false\n        });\n\n        var callDiv = \"\";\n\n        if(username != \"\" && userCalls != null && userCalls.length > 0) {\n            callDiv = <Call callid={userCalls[0].id} from={userCalls[0].from} />\n        }\n\n        if(username != \"\" && showVideo != null && showVideo.length > 0) {\n            callDiv = <Call showVideo=\"true\" callid={showVideo[0].id} from={showVideo[0].from} />\n        }\n\n        if(this.props.Username != \"\") {\n            return (\n                <div id=\"message-list\" className={'messages'}>\n                    {callDiv}\n                    <div>\n                        <ul>\n                            {\n                                Object.keys(this.state.messageList).map((m) => \n                                    <Message Id={this.state.messageList[m].id} Color={this.state.messageList[m].color} Sent={this.props.Username != this.state.messageList[m].username} Username={this.state.messageList[m].username} Text={this.state.messageList[m].message} Deleted={this.state.messageList[m].deleted} IsImage={this.state.messageList[m].isImage} IsVideo={this.state.messageList[m].isVideo} Date={this.state.messageList[m].date} />\n                                )\n                            }\n                        </ul>\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div className={'messages'}>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Messages;","import React, { useState } from 'react';\nimport Profile from './Profile';\nimport MessageInput from './MessageInput';\nimport Login  from './Login';\nimport Register from './Register';\nimport { Counter } from '../features/counter/Counter';\nimport Messages from './Messages';\nimport VideoChatContainer from './VideoChatContainer';\nimport VideoChat from './VideoChat';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n    memberColor,\n    showVideoCall\n} from '../features/memberProcess';\nconst Frame = () => {\n    const username = useSelector(memberUsername);\n    const color = useSelector(memberColor);\n\n    const videoCall = useSelector(showVideoCall);\n\n    var videoCallContent = \"\";\n\n    if(videoCall == \"true\") {\n        videoCallContent = <VideoChat user={username} />\n    }\n\n    return (\n        <div id=\"frame\">\n            <div className={'content'}>\n                <Profile />\n                <Messages Username={username} />\n                <MessageInput Username={username} Color={color} />\n                <Login />\n                <Register /> \n                {videoCallContent}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Frame;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport memberReducer from '../features/memberProcess';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    member: memberReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport Frame from './components/Frame';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport firebase from './config/Config';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Frame />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nfirebase.auth().signOut().then(() => {\r\n\r\n}).catch((error) => {\r\n\r\n});","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3InZU\",\"value\":\"Counter_value__xcC_T\",\"button\":\"Counter_button__18Vrb\",\"textbox\":\"Counter_textbox__ulF6J\",\"asyncButton\":\"Counter_asyncButton__3Maus Counter_button__18Vrb\"};"],"sourceRoot":""}